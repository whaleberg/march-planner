
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Participant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Participant
 * 
 */
export type ParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$ParticipantPayload>

export type AggregateParticipant = {
  _count: ParticipantCountAggregateOutputType | null
  _avg: ParticipantAvgAggregateOutputType | null
  _sum: ParticipantSumAggregateOutputType | null
  _min: ParticipantMinAggregateOutputType | null
  _max: ParticipantMaxAggregateOutputType | null
}

export type ParticipantAvgAggregateOutputType = {
  id: number | null
}

export type ParticipantSumAggregateOutputType = {
  id: number | null
}

export type ParticipantMinAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  phone: string | null
  emergencyContact: string | null
  dietaryRestrictions: string | null
  notes: string | null
  medic: boolean | null
  peacekeeper: boolean | null
}

export type ParticipantMaxAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  phone: string | null
  emergencyContact: string | null
  dietaryRestrictions: string | null
  notes: string | null
  medic: boolean | null
  peacekeeper: boolean | null
}

export type ParticipantCountAggregateOutputType = {
  id: number
  name: number
  email: number
  phone: number
  emergencyContact: number
  dietaryRestrictions: number
  notes: number
  medic: number
  peacekeeper: number
  _all: number
}


export type ParticipantAvgAggregateInputType = {
  id?: true
}

export type ParticipantSumAggregateInputType = {
  id?: true
}

export type ParticipantMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  emergencyContact?: true
  dietaryRestrictions?: true
  notes?: true
  medic?: true
  peacekeeper?: true
}

export type ParticipantMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  emergencyContact?: true
  dietaryRestrictions?: true
  notes?: true
  medic?: true
  peacekeeper?: true
}

export type ParticipantCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  emergencyContact?: true
  dietaryRestrictions?: true
  notes?: true
  medic?: true
  peacekeeper?: true
  _all?: true
}

export type ParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Participant to aggregate.
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Participants to fetch.
   */
  orderBy?: Prisma.ParticipantOrderByWithRelationInput | Prisma.ParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Participants
  **/
  _count?: true | ParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ParticipantAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ParticipantSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ParticipantMaxAggregateInputType
}

export type GetParticipantAggregateType<T extends ParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateParticipant[P]>
}




export type ParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ParticipantWhereInput
  orderBy?: Prisma.ParticipantOrderByWithAggregationInput | Prisma.ParticipantOrderByWithAggregationInput[]
  by: Prisma.ParticipantScalarFieldEnum[] | Prisma.ParticipantScalarFieldEnum
  having?: Prisma.ParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ParticipantCountAggregateInputType | true
  _avg?: ParticipantAvgAggregateInputType
  _sum?: ParticipantSumAggregateInputType
  _min?: ParticipantMinAggregateInputType
  _max?: ParticipantMaxAggregateInputType
}

export type ParticipantGroupByOutputType = {
  id: number
  name: string
  email: string
  phone: string | null
  emergencyContact: string
  dietaryRestrictions: string | null
  notes: string | null
  medic: boolean
  peacekeeper: boolean
  _count: ParticipantCountAggregateOutputType | null
  _avg: ParticipantAvgAggregateOutputType | null
  _sum: ParticipantSumAggregateOutputType | null
  _min: ParticipantMinAggregateOutputType | null
  _max: ParticipantMaxAggregateOutputType | null
}

type GetParticipantGroupByPayload<T extends ParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ParticipantGroupByOutputType[P]>
      }
    >
  > 



export type ParticipantWhereInput = {
  AND?: Prisma.ParticipantWhereInput | Prisma.ParticipantWhereInput[]
  OR?: Prisma.ParticipantWhereInput[]
  NOT?: Prisma.ParticipantWhereInput | Prisma.ParticipantWhereInput[]
  id?: Prisma.IntFilter<"Participant"> | number
  name?: Prisma.StringFilter<"Participant"> | string
  email?: Prisma.StringFilter<"Participant"> | string
  phone?: Prisma.StringNullableFilter<"Participant"> | string | null
  emergencyContact?: Prisma.StringFilter<"Participant"> | string
  dietaryRestrictions?: Prisma.StringNullableFilter<"Participant"> | string | null
  notes?: Prisma.StringNullableFilter<"Participant"> | string | null
  medic?: Prisma.BoolFilter<"Participant"> | boolean
  peacekeeper?: Prisma.BoolFilter<"Participant"> | boolean
}

export type ParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  dietaryRestrictions?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  medic?: Prisma.SortOrder
  peacekeeper?: Prisma.SortOrder
}

export type ParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ParticipantWhereInput | Prisma.ParticipantWhereInput[]
  OR?: Prisma.ParticipantWhereInput[]
  NOT?: Prisma.ParticipantWhereInput | Prisma.ParticipantWhereInput[]
  name?: Prisma.StringFilter<"Participant"> | string
  email?: Prisma.StringFilter<"Participant"> | string
  phone?: Prisma.StringNullableFilter<"Participant"> | string | null
  emergencyContact?: Prisma.StringFilter<"Participant"> | string
  dietaryRestrictions?: Prisma.StringNullableFilter<"Participant"> | string | null
  notes?: Prisma.StringNullableFilter<"Participant"> | string | null
  medic?: Prisma.BoolFilter<"Participant"> | boolean
  peacekeeper?: Prisma.BoolFilter<"Participant"> | boolean
}, "id">

export type ParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  dietaryRestrictions?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  medic?: Prisma.SortOrder
  peacekeeper?: Prisma.SortOrder
  _count?: Prisma.ParticipantCountOrderByAggregateInput
  _avg?: Prisma.ParticipantAvgOrderByAggregateInput
  _max?: Prisma.ParticipantMaxOrderByAggregateInput
  _min?: Prisma.ParticipantMinOrderByAggregateInput
  _sum?: Prisma.ParticipantSumOrderByAggregateInput
}

export type ParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.ParticipantScalarWhereWithAggregatesInput | Prisma.ParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.ParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ParticipantScalarWhereWithAggregatesInput | Prisma.ParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Participant"> | number
  name?: Prisma.StringWithAggregatesFilter<"Participant"> | string
  email?: Prisma.StringWithAggregatesFilter<"Participant"> | string
  phone?: Prisma.StringNullableWithAggregatesFilter<"Participant"> | string | null
  emergencyContact?: Prisma.StringWithAggregatesFilter<"Participant"> | string
  dietaryRestrictions?: Prisma.StringNullableWithAggregatesFilter<"Participant"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"Participant"> | string | null
  medic?: Prisma.BoolWithAggregatesFilter<"Participant"> | boolean
  peacekeeper?: Prisma.BoolWithAggregatesFilter<"Participant"> | boolean
}

export type ParticipantCreateInput = {
  name: string
  email: string
  phone?: string | null
  emergencyContact: string
  dietaryRestrictions?: string | null
  notes?: string | null
  medic?: boolean
  peacekeeper?: boolean
}

export type ParticipantUncheckedCreateInput = {
  id?: number
  name: string
  email: string
  phone?: string | null
  emergencyContact: string
  dietaryRestrictions?: string | null
  notes?: string | null
  medic?: boolean
  peacekeeper?: boolean
}

export type ParticipantUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  dietaryRestrictions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  medic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  peacekeeper?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParticipantUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  dietaryRestrictions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  medic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  peacekeeper?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParticipantCreateManyInput = {
  id?: number
  name: string
  email: string
  phone?: string | null
  emergencyContact: string
  dietaryRestrictions?: string | null
  notes?: string | null
  medic?: boolean
  peacekeeper?: boolean
}

export type ParticipantUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  dietaryRestrictions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  medic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  peacekeeper?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParticipantUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.StringFieldUpdateOperationsInput | string
  dietaryRestrictions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  medic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  peacekeeper?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  dietaryRestrictions?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  medic?: Prisma.SortOrder
  peacekeeper?: Prisma.SortOrder
}

export type ParticipantAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  dietaryRestrictions?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  medic?: Prisma.SortOrder
  peacekeeper?: Prisma.SortOrder
}

export type ParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  dietaryRestrictions?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  medic?: Prisma.SortOrder
  peacekeeper?: Prisma.SortOrder
}

export type ParticipantSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type ParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  emergencyContact?: boolean
  dietaryRestrictions?: boolean
  notes?: boolean
  medic?: boolean
  peacekeeper?: boolean
}, ExtArgs["result"]["participant"]>

export type ParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  emergencyContact?: boolean
  dietaryRestrictions?: boolean
  notes?: boolean
  medic?: boolean
  peacekeeper?: boolean
}, ExtArgs["result"]["participant"]>

export type ParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  emergencyContact?: boolean
  dietaryRestrictions?: boolean
  notes?: boolean
  medic?: boolean
  peacekeeper?: boolean
}, ExtArgs["result"]["participant"]>

export type ParticipantSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  emergencyContact?: boolean
  dietaryRestrictions?: boolean
  notes?: boolean
  medic?: boolean
  peacekeeper?: boolean
}

export type ParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "phone" | "emergencyContact" | "dietaryRestrictions" | "notes" | "medic" | "peacekeeper", ExtArgs["result"]["participant"]>

export type $ParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Participant"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    email: string
    phone: string | null
    emergencyContact: string
    dietaryRestrictions: string | null
    notes: string | null
    medic: boolean
    peacekeeper: boolean
  }, ExtArgs["result"]["participant"]>
  composites: {}
}

export type ParticipantGetPayload<S extends boolean | null | undefined | ParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ParticipantPayload, S>

export type ParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ParticipantCountAggregateInputType | true
  }

export interface ParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Participant'], meta: { name: 'Participant' } }
  /**
   * Find zero or one Participant that matches the filter.
   * @param {ParticipantFindUniqueArgs} args - Arguments to find a Participant
   * @example
   * // Get one Participant
   * const participant = await prisma.participant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, ParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Participant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ParticipantFindUniqueOrThrowArgs} args - Arguments to find a Participant
   * @example
   * // Get one Participant
   * const participant = await prisma.participant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Participant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantFindFirstArgs} args - Arguments to find a Participant
   * @example
   * // Get one Participant
   * const participant = await prisma.participant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, ParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Participant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantFindFirstOrThrowArgs} args - Arguments to find a Participant
   * @example
   * // Get one Participant
   * const participant = await prisma.participant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Participants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Participants
   * const participants = await prisma.participant.findMany()
   * 
   * // Get first 10 Participants
   * const participants = await prisma.participant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const participantWithIdOnly = await prisma.participant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, ParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Participant.
   * @param {ParticipantCreateArgs} args - Arguments to create a Participant.
   * @example
   * // Create one Participant
   * const Participant = await prisma.participant.create({
   *   data: {
   *     // ... data to create a Participant
   *   }
   * })
   * 
   */
  create<T extends ParticipantCreateArgs>(args: Prisma.SelectSubset<T, ParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Participants.
   * @param {ParticipantCreateManyArgs} args - Arguments to create many Participants.
   * @example
   * // Create many Participants
   * const participant = await prisma.participant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, ParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Participants and returns the data saved in the database.
   * @param {ParticipantCreateManyAndReturnArgs} args - Arguments to create many Participants.
   * @example
   * // Create many Participants
   * const participant = await prisma.participant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Participants and only return the `id`
   * const participantWithIdOnly = await prisma.participant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Participant.
   * @param {ParticipantDeleteArgs} args - Arguments to delete one Participant.
   * @example
   * // Delete one Participant
   * const Participant = await prisma.participant.delete({
   *   where: {
   *     // ... filter to delete one Participant
   *   }
   * })
   * 
   */
  delete<T extends ParticipantDeleteArgs>(args: Prisma.SelectSubset<T, ParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Participant.
   * @param {ParticipantUpdateArgs} args - Arguments to update one Participant.
   * @example
   * // Update one Participant
   * const participant = await prisma.participant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ParticipantUpdateArgs>(args: Prisma.SelectSubset<T, ParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Participants.
   * @param {ParticipantDeleteManyArgs} args - Arguments to filter Participants to delete.
   * @example
   * // Delete a few Participants
   * const { count } = await prisma.participant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, ParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Participants
   * const participant = await prisma.participant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, ParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Participants and returns the data updated in the database.
   * @param {ParticipantUpdateManyAndReturnArgs} args - Arguments to update many Participants.
   * @example
   * // Update many Participants
   * const participant = await prisma.participant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Participants and only return the `id`
   * const participantWithIdOnly = await prisma.participant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Participant.
   * @param {ParticipantUpsertArgs} args - Arguments to update or create a Participant.
   * @example
   * // Update or create a Participant
   * const participant = await prisma.participant.upsert({
   *   create: {
   *     // ... data to create a Participant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Participant we want to update
   *   }
   * })
   */
  upsert<T extends ParticipantUpsertArgs>(args: Prisma.SelectSubset<T, ParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantCountArgs} args - Arguments to filter Participants to count.
   * @example
   * // Count the number of Participants
   * const count = await prisma.participant.count({
   *   where: {
   *     // ... the filter for the Participants we want to count
   *   }
   * })
  **/
  count<T extends ParticipantCountArgs>(
    args?: Prisma.Subset<T, ParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Participant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ParticipantAggregateArgs>(args: Prisma.Subset<T, ParticipantAggregateArgs>): Prisma.PrismaPromise<GetParticipantAggregateType<T>>

  /**
   * Group by Participant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ParticipantGroupByArgs['orderBy'] }
      : { orderBy?: ParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Participant model
 */
readonly fields: ParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Participant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Participant model
 */
export interface ParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"Participant", 'Int'>
  readonly name: Prisma.FieldRef<"Participant", 'String'>
  readonly email: Prisma.FieldRef<"Participant", 'String'>
  readonly phone: Prisma.FieldRef<"Participant", 'String'>
  readonly emergencyContact: Prisma.FieldRef<"Participant", 'String'>
  readonly dietaryRestrictions: Prisma.FieldRef<"Participant", 'String'>
  readonly notes: Prisma.FieldRef<"Participant", 'String'>
  readonly medic: Prisma.FieldRef<"Participant", 'Boolean'>
  readonly peacekeeper: Prisma.FieldRef<"Participant", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Participant findUnique
 */
export type ParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter, which Participant to fetch.
   */
  where: Prisma.ParticipantWhereUniqueInput
}

/**
 * Participant findUniqueOrThrow
 */
export type ParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter, which Participant to fetch.
   */
  where: Prisma.ParticipantWhereUniqueInput
}

/**
 * Participant findFirst
 */
export type ParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter, which Participant to fetch.
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Participants to fetch.
   */
  orderBy?: Prisma.ParticipantOrderByWithRelationInput | Prisma.ParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Participants.
   */
  cursor?: Prisma.ParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Participants.
   */
  distinct?: Prisma.ParticipantScalarFieldEnum | Prisma.ParticipantScalarFieldEnum[]
}

/**
 * Participant findFirstOrThrow
 */
export type ParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter, which Participant to fetch.
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Participants to fetch.
   */
  orderBy?: Prisma.ParticipantOrderByWithRelationInput | Prisma.ParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Participants.
   */
  cursor?: Prisma.ParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Participants.
   */
  distinct?: Prisma.ParticipantScalarFieldEnum | Prisma.ParticipantScalarFieldEnum[]
}

/**
 * Participant findMany
 */
export type ParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter, which Participants to fetch.
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Participants to fetch.
   */
  orderBy?: Prisma.ParticipantOrderByWithRelationInput | Prisma.ParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Participants.
   */
  cursor?: Prisma.ParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Participants.
   */
  skip?: number
  distinct?: Prisma.ParticipantScalarFieldEnum | Prisma.ParticipantScalarFieldEnum[]
}

/**
 * Participant create
 */
export type ParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * The data needed to create a Participant.
   */
  data: Prisma.XOR<Prisma.ParticipantCreateInput, Prisma.ParticipantUncheckedCreateInput>
}

/**
 * Participant createMany
 */
export type ParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Participants.
   */
  data: Prisma.ParticipantCreateManyInput | Prisma.ParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Participant createManyAndReturn
 */
export type ParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many Participants.
   */
  data: Prisma.ParticipantCreateManyInput | Prisma.ParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Participant update
 */
export type ParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * The data needed to update a Participant.
   */
  data: Prisma.XOR<Prisma.ParticipantUpdateInput, Prisma.ParticipantUncheckedUpdateInput>
  /**
   * Choose, which Participant to update.
   */
  where: Prisma.ParticipantWhereUniqueInput
}

/**
 * Participant updateMany
 */
export type ParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Participants.
   */
  data: Prisma.XOR<Prisma.ParticipantUpdateManyMutationInput, Prisma.ParticipantUncheckedUpdateManyInput>
  /**
   * Filter which Participants to update
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * Limit how many Participants to update.
   */
  limit?: number
}

/**
 * Participant updateManyAndReturn
 */
export type ParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * The data used to update Participants.
   */
  data: Prisma.XOR<Prisma.ParticipantUpdateManyMutationInput, Prisma.ParticipantUncheckedUpdateManyInput>
  /**
   * Filter which Participants to update
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * Limit how many Participants to update.
   */
  limit?: number
}

/**
 * Participant upsert
 */
export type ParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * The filter to search for the Participant to update in case it exists.
   */
  where: Prisma.ParticipantWhereUniqueInput
  /**
   * In case the Participant found by the `where` argument doesn't exist, create a new Participant with this data.
   */
  create: Prisma.XOR<Prisma.ParticipantCreateInput, Prisma.ParticipantUncheckedCreateInput>
  /**
   * In case the Participant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ParticipantUpdateInput, Prisma.ParticipantUncheckedUpdateInput>
}

/**
 * Participant delete
 */
export type ParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
  /**
   * Filter which Participant to delete.
   */
  where: Prisma.ParticipantWhereUniqueInput
}

/**
 * Participant deleteMany
 */
export type ParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Participants to delete
   */
  where?: Prisma.ParticipantWhereInput
  /**
   * Limit how many Participants to delete.
   */
  limit?: number
}

/**
 * Participant without action
 */
export type ParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Participant
   */
  select?: Prisma.ParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Participant
   */
  omit?: Prisma.ParticipantOmit<ExtArgs> | null
}
